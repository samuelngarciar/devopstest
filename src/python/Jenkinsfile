pipeline {

 agent any
    stages {
        stage("Build-docker-img") {
            steps {
                script {
                    sh "cd src/python; sudo podman build -t test/program:latest ."
                }
            }
        }
        
         stage("Login-Registry-Dockerhub") {
            steps {
            
                     withCredentials([usernamePassword(credentialsId: 'DOCKERHUBID', passwordVariable: 'DOCKERHUB_PASSWORD', usernameVariable: 'DOCKERHUB_USERNAME')]) {
                    sh '''
                        sudo podman login --username $DOCKERHUB_USERNAME --password $DOCKERHUB_PASSWORD docker.io                      
                    '''

                   
                }
            }
        }
        
        
         stage("Push-Docker-img") {
            steps {
                script {
                    sh "cd src/python; sudo podman images; sudo podman push localhost/test/program:latest samys288/mypython:latest"
                
                }
            }
        }

             stage("Deploy-on-k3s") {
            steps {
                script {
                    sh "NAMEDEPLOY=mspython; sudo /usr/local/bin/k3s kubectl get deployment \$NAMEDEPLOY &> /dev/null &&  \$( sudo /usr/local/bin/k3s kubectl delete -f src/k8s-manifiest/mspython-deploy.yaml ) || echo 'First deploy';  sudo /usr/local/bin/k3s kubectl apply -f src/k8s-manifiest/mspython-deploy.yaml"
                    sh "sudo /usr/local/bin/k3s kubectl apply -f src/k8s-manifiest/mspython-clusterip.yaml"
                }
            }
        }


      stage("Testing-svc-clusterip") {
            steps {
                script {
                    sh "NAMESVC=svc-mspython;  curl http://\$( kubectl get svc \$NAMESVC -o jsonpath='{.spec.clusterIP}' ):\$( kubectl get svc \$NAMESVC -o jsonpath='{.spec.ports[0].port}' )/"
                    
                }
            }
        }

     
    }
}
